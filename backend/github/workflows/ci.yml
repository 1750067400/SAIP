name: CI Pipeline

# 触发条件：每次 push 到 main 分支 或者手动触发
on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  BASE_IMAGE_NAME: saip-base
  APP_IMAGE_NAME: localhost:5000/saip
  PATH_TO_HOST_FOLDER_TO_SCAN: /var/lib/jenkins/workspace/saip

jobs:
  # 第一步：检测基础镜像相关文件是否变化
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      base_image_changed: ${{ steps.detect.outputs.base_image_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Detect base-image changes
        id: detect
        run: |
          changes=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          if echo "$changes" | grep -Eq 'pom.xml|Dockerfile.base'; then
            echo "::set-output name=base_image_changed::true"
          else
            echo "::set-output name=base_image_changed::false"
          fi

  # 第二步：运行测试
  test:
    needs: detect_changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Maven tests
        run: ./mvnw test

  # 第三步：仅当基础镜像有变更时，重建基础镜像
  build_base:
    if: needs.detect_changes.outputs.base_image_changed == 'true'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build base Docker image
        run: docker build -t ${{ env.BASE_IMAGE_NAME }}:latest -f Dockerfile.base .

  # 第四步：构建并推送应用镜像
  build_and_push:
    needs: [ test, build_base ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          registry: localhost:5000
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push images
        run: |
          docker build \
            --cache-from=${{ env.BASE_IMAGE_NAME }}:latest \
            -t ${{ env.APP_IMAGE_NAME }}:${{ github.run_number }} \
            -t ${{ env.APP_IMAGE_NAME }}:latest .
          docker push ${{ env.APP_IMAGE_NAME }}:${{ github.run_number }}
          docker push ${{ env.APP_IMAGE_NAME }}:latest

  # 第五步：在 Runner 本地环境部署（一般用于测试环境）
  deploy_locally:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy locally with Docker
        run: |
          docker stop saip || true
          docker rm saip  || true
          docker run -d --name saip -p 8080:8080 ${{ env.APP_IMAGE_NAME }}:latest

  # 第六步：生产环境部署，借助 GitHub Environments 实现手动审批
  deploy_production:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment:
      name: production   # 请在 GitHub 仓库设置里为 production 环境配置 “Required reviewers”
    steps:
      - name: Deploy to Production
        run: |
          echo "开始部署到生产环境..."
          # 在此处填入你的生产部署脚本，比如 kubectl/ansible/ssh 等
